## 		LOGGING			##

# Bash has a handy SECONDS builtin variable that tracks the number of
# seconds that have passed since the shell was started. This variable
# retains its properties when assigned to, and the value returned after
# the assignment is the number of seconds since the assignment plus the
# assigned value.
# 
# Thus, you can just set SECONDS to 0 before starting the timed event,
# simply read SECONDS after the event, and do the time arithmetic before
# displaying.

#!/usr/bin/env bash

SECONDS=0
# do some work
duration=$SECONDS
echo "$(($duration / 60)) minutes and $(($duration % 60)) seconds elapsed."

# 		calculate and report run time
startTime=$( /bin/date '+%s' ) # epoch time
stopTime=$( /bin/date '+%s' )
seconds=$(( $stopTime-$startTime ))
formattedTime=$( /bin/date -j -f "%s" "$seconds" '+%M minutes and %S seconds' )
echo "Elapsed time: $formattedTime"

/bin/date +'Started update at %-l:%M %p.' 	# 12-hr clock with am/pm

/bin/date -j -f '%Y-%m-%d' 2022-06-02 +'%A, %B %-d, %Y' # conversion example, -j to not set

/usr/bin/uptime | /usr/bin/awk -F 'up |, [0-9]+ users' '{ print $2 }' # consistent values

/bin/date -r $time # macOS version of epoch time prettyprint
# ex.:
#  install-time: 1694126453
#  $ date -r 1694126453
#  Thu Sep  7 17:40:53 CDT 2023


currentDate=$(/bin/date "+%d%m%Y_%H%M") 	#echo $currentDate
currentFullDate=$(/bin/date) 				#echo $currentFullDate

# Get boot time, clean up output to something useful
boottime=`sysctl kern.boottime | sed 's/,//g' | awk '{print $5}'`

# Get the current time
currenttime=`date +%s`

# Determine total uptime
upt=$(($currenttime - $boottime))

# when was it installed?
date -r $(pkgutil --pkg-info org.vendor.name.pkg | awk 'END{print $NF}')    # Wed Nov 15 15:28:34 CST 2023
